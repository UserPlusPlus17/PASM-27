# ПОЛНОЕ РУКОВОДСТВО PASM
# Версия 27 ()


## ОГЛАВЛЕНИЕ
1. Введение и основные концепции
2. Синтаксис и структура программ
3. Система регистров (полная спецификация)
4. Организация памяти и работа с ней
5. Полный список инструкций с подробным описанием
6. Система флагов и условные переходы
7. Работа с подпрограммами и стеком
8. Ввод-вывод и системные команды
9. Примеры программ (от простых до сложных)
10. Методика отладки и диагностики
11. Рекомендации по стилю и оптимизации
12. Приложения (таблицы и справочники)

============================================
1. ВВЕДЕНИЕ И ОСНОВНЫЕ КОНЦЕПЦИИ

Данный язык ассемблера разработан для виртуальной машины с архитектурой, аналогичной x86-64, но с упрощенным набором команд.

Основные особенности:
- Регистровая машина с 16 основными 64-битными регистрами
- Поддержка подрегистров (32/16/8 бит)
- Линейная адресация памяти
- Стековая организация вызовов подпрограмм
- Система флагов для контроля условий
- Базовые операции ввода-вывода

Программы представляют собой последовательности инструкций, выполняемых строго по порядку, если не встретится команда перехода.

============================================
2. СИНТАКСИС И СТРУКТУРА ПРОГРАММ

Формат строки:
[метка:] инструкция [операнды] [; комментарий]

Пример корректной программы:
----------------------------------------
; Пример программы сложения двух чисел
section .data
    num1 dq 15      ; Первое число
    num2 dq 27      ; Второе число

section .text
global _start

_start:
    mov rax, [num1] ; Загрузка первого числа
    add rax, [num2] ; Сложение
    out rax         ; Вывод результата
    halt            ; Остановка программы
----------------------------------------

Основные элементы:
- Метки: идентификаторы с двоеточием (start:)
- Инструкции: мнемоники команд (mov, add)
- Операнды: регистры, значения, адреса
- Директивы: управление ассемблером (section)
- Комментарии: начинаются с ;

============================================
3. ПОЛНАЯ СПЕЦИФИКАЦИЯ РЕГИСТРОВ

64-битные регистры общего назначения:
RAX  - аккумулятор (основные операции)
RBX  - базовый регистр
RCX  - счетчик (для циклов)
RDX  - данные (дополнительный)
RSI  - указатель источника
RDI  - указатель приемника
RBP  - указатель базы стека
RSP  - указатель вершины стека
R8-R15 - дополнительные регистры

32-битные подрегистры (младшая часть):
EAX, EBX, ECX, EDX, ESI, EDI, EBP, ESP

16-битные подрегистры:
AX, BX, CX, DX, SI, DI, BP, SP

8-битные подрегистры:
AL, BL, CL, DL - младшие байты
AH, BH, CH, DH - старшие байты (только AX-DX)

Специальные регистры:
RIP - указатель инструкции (read-only)
FLAGS - регистр флагов (биты состояния)

============================================
4. ОРГАНИЗАЦИЯ ПАМЯТИ

Память представляет собой линейное адресное пространство с ячейками по 8 бит.

Ключевые особенности:
- Адреса 64-битные (0x00000000 до 0xFFFFFFFFFFFFFFFF)
- Доступ через [] (например: [rax], [0x1000])
- Little-endian порядок байт
- Стек растет в сторону младших адресов

Примеры работы с памятью:
mov [rbx], rax    ; Сохранить RAX по адресу в RBX
mov rcx, [0x1000] ; Загрузить из памяти в RCX
lea rdx, [rsi+8]  ; Вычислить адрес (RDI+8)

============================================
5. ПОЛНЫЙ СПИСОК ИНСТРУКЦИЙ

5.1 Передача данных:
mov  dst,src - копирование данных
push src     - поместить в стек
pop  dst     - извлечь из стека
lea  dst,[src] - загрузка адреса

5.2 Арифметические:
add  dst,src - сложение
sub  dst,src - вычитание
inc  op      - инкремент
dec  op      - декремент
mul  src     - беззнаковое умножение
imul src     - знаковое умножение
div  src     - беззнаковое деление
idiv src     - знаковое деление
neg  op      - смена знака

5.3 Логические:
and  dst,src - побитовое И
or   dst,src - побитовое ИЛИ
xor  dst,src - исключающее ИЛИ
not  op      - побитовое НЕ
test op1,op2 - логическое И (только флаги)

5.4 Сдвиги:
shl  dst,cnt - сдвиг влево
shr  dst,cnt - сдвиг вправо
sar  dst,cnt - арифм. сдвиг вправо
rol  dst,cnt - цикл. сдвиг влево
ror  dst,cnt - цикл. сдвиг вправо

5.5 Управление потоком:
jmp  label   - безусловный переход
je/jz label  - если равно/ноль
jne/jnz label - если не равно
ja   label   - если выше (беззнак.)
jg   label   - если больше (знаков.)
jb   label   - если ниже
jl   label   - если меньше
call label   - вызов подпрограммы
ret          - возврат

5.6 Ввод-вывод:
in   dst     - ввод числа
out  src     - вывод числа
out_char src - вывод символа
out_str "txt" - вывод строки

5.7 Системные:
nop          - пустая операция
halt         - остановка
dump         - дамп состояния
clear        - очистка экрана

============================================
6. СИСТЕМА ФЛАГОВ

Биты регистра FLAGS:
CF (0) - Carry Flag - флаг переноса
PF (2) - Parity Flag - четность результата
AF (4) - Auxiliary Flag - перенос в 4-й бит
ZF (6) - Zero Flag - результат ноль
SF (7) - Sign Flag - знак результата
OF (11) - Overflow Flag - переполнение

Пример проверки флагов:
cmp rax, rbx  ; Сравнение RAX и RBX
jg greater    ; Переход если RAX > RBX (знаковое)

============================================
7. ПОДПРОГРАММЫ И СТЕК

Стандартный вызов подпрограммы:
1. call label - сохраняет адрес возврата в стеке
2. ...       - код подпрограммы
3. ret       - извлекает адрес и возвращает

Пример:
main:
    mov rax, 5
    call square
    out rax    ; Выведет 25
    halt

square:
    imul rax, rax
    ret

============================================
8. ВВОД-ВЫВОД

Система ввода-вывода:
- in  - читает число в регистр
- out - выводит число из регистра
- out_char - выводит ASCII-символ
- out_str - выводит строковый литерал

Пример:
out_str "Результат: "
mov rax, 42
out rax
out_char 10 ; Перевод строки

============================================
9. ПРИМЕРЫ ПРОГРАММ

9.1 Вычисление суммы чисел от 1 до N:
mov rcx, 100    ; N = 100
xor rax, rax    ; Обнуление суммы

sum_loop:
    add rax, rcx
    loop sum_loop ; RCX-- и повтор если не 0

out rax        ; Вывод суммы (5050)
halt

9.2 Поиск в массиве:
; Инициализация
mov qword [0x1000], 12
mov qword [0x1008], 34
mov qword [0x1010], 5

; Поиск значения 34
mov rsi, 0x1000 ; Начало массива
mov rcx, 3      ; Количество элементов

search:
    cmp qword [rsi], 34
    je found
    add rsi, 8
    loop search

out_str "Не найдено"
halt

found:
    out_str "Найдено по адресу "
    out rsi
    halt

============================================
10. ОТЛАДКА И ДИАГНОСТИКА

Методы отладки:
1. Использование dump для вывода состояния
2. Пошаговое выполнение
3. Контрольные точки (breakpoints)
4. Валидация данных

Пример диагностики:
mov rax, 0x1234
dump ; Покажет состояние всех регистров

============================================
11. РЕКОМЕНДАЦИИ ПО СТИЛЮ

1. Комментируйте сложные участки кода
2. Используйте осмысленные метки
3. Соблюдайте отступы для вложенных блоков
4. Группируйте связанные инструкции
5. Проверяйте граничные условия

Пример хорошего стиля:
; Вычисление факториала
; Вход: RCX = число
; Выход: RAX = результат
factorial:
    mov rax, 1      ; Инициализация
    
    .loop:          ; Метка локального цикла
    test rcx, rcx   ; Проверка на 0
    jz .done        ; Если 0 - завершение
    imul rax, rcx   ; Умножение
    dec rcx         ; Уменьшение счетчика
    jmp .loop       ; Повтор
    
    .done:
    ret             ; Возврат результата

============================================
12. ПРИЛОЖЕНИЯ

12.1 Таблица инструкций:
| Инструкция | Описание            | Флаги      |
|------------|---------------------|------------|
| mov        | Перемещение данных  | Не изменяет|
| add        | Сложение            | Все        |
| sub        | Вычитание           | Все        |
| ...        | ...                 | ...        |

12.2 Таблица регистров:
| 64-бит | 32-бит | 16-бит | 8-бит (low) | 8-бит (high) |
|--------|--------|--------|-------------|--------------|
| RAX    | EAX    | AX     | AL          | AH           |
| RBX    | EBX    | BX     | BL          | BH           |
| ...    | ...    | ...    | ...         | ...          |

КОНЕЦ РУКОВОДСТВА
